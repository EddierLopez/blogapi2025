// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package dto

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :execresult
INSERT INTO posts(id,user_id,category_id,title,content,image,created_at,updated_at)
VALUES(?,?,?,?,?,?,now(),now())
`

type CreatePostParams struct {
	ID         int32  `json:"id"`
	UserID     int32  `json:"user_id"`
	CategoryID int32  `json:"category_id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	Image      string `json:"image"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.CategoryID,
		arg.Title,
		arg.Content,
		arg.Image,
	)
}

const deletePost = `-- name: DeletePost :execresult
DELETE FROM posts where id=?
`

func (q *Queries) DeletePost(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePost, id)
}

const getAllPost = `-- name: GetAllPost :many
SELECT id, user_id, category_id, title, content, image, created_at, updated_at FROM posts
`

func (q *Queries) GetAllPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, category_id, title, content, image, created_at, updated_at FROM posts WHERE id=? LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Title,
		&i.Content,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByCategory = `-- name: GetPostsByCategory :many
SELECT id, user_id, category_id, title, content, image, created_at, updated_at FROM posts WHERE category_id=?
`

func (q *Queries) GetPostsByCategory(ctx context.Context, categoryID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT id, user_id, category_id, title, content, image, created_at, updated_at FROM posts WHERE user_id=?
`

func (q *Queries) GetPostsByUser(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
