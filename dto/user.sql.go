// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package dto

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(name,last_name,email,password,role,created_at,updated_at)
VALUES(?,?,?,?,?,now(),now())
`

type CreateUserParams struct {
	Name     string `json:"name"`
	LastName string `json:"last_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, last_name, role, email, password, description, image, created_at, updated_at, remember_token FROM users WHERE email=? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Description,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RememberToken,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users SET name=?,last_name=?,updated_at=now() WHERE id=?
`

type UpdateUserParams struct {
	Name     string `json:"name"`
	LastName string `json:"last_name"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Name, arg.LastName, arg.ID)
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users set password=? WHERE id=?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
}

const updateUserRole = `-- name: UpdateUserRole :execresult
UPDATE users set role=? WHERE id=?
`

type UpdateUserRoleParams struct {
	Role string `json:"role"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserRole, arg.Role, arg.ID)
}
